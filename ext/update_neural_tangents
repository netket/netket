#!/bin/bash

# This script is used to update the vendored copy of google/neural-tangents
# contained in netket_pro/_src/external . It will clone the repository, and copy
# some parts of the library into the target directory. It will also create an
# __init__.py file to import the relevant functions.

# To update netket_pro/_src/external/neural_tangents, run this script from the
# root of the repository.

set -e
set -x

# Repository to clone, https address
REPO_NAME="https://github.com/google/neural-tangents.git"
# Target directory to copy to.
TARGET_DIR="netket/_src/external/neural_tangents"

# List of files to copy
FILES=(
    "neural_tangents/_src/empirical.py"
    "neural_tangents/_src/utils"
)
# Optional licence file to copy
LICENCE="LICENSE"

# Import files above in an __init__.py file ?
IMPORT_FILES=1
# Content to write in the __init__.py file
INIT_FILE="""
from .empirical import empirical_kernel_fn
from .empirical import empirical_nngp_fn
from .empirical import empirical_ntk_fn
from .empirical import empirical_ntk_vp_fn
from .empirical import linearize
from .empirical import NtkImplementation
from .empirical import taylor_expand
"""

# Delete the old directory before copying the new one
DELETE_OLD=1

#----------------------------------------------

# Get a temporary directory
TMPDIR=$(mktemp -d)

# Get the full path of the directory containing the script, and then the containing folder
NETKET_PRO_ROOT=$(dirname $(dirname $(realpath "$0")))
ABSOLUTE_TARGET_PATH=$NETKET_PRO_ROOT/$TARGET_DIR

# Pull the repository into the temporary director
git clone $REPO_NAME $TMPDIR

# Cleanup the target directory, else move it away
if [ $DELETE_OLD -eq 1 ]; then
    rm -rf $ABSOLUTE_TARGET_PATH
else
    mv $ABSOLUTE_TARGET_PATH $ABSOLUTE_TARGET_PATH.old
fi

# Create the target directory
mkdir -p $ABSOLUTE_TARGET_PATH

# Copy all files into the target directory
for FILE in "${FILES[@]}"; do
    cp -r $TMPDIR/$FILE $ABSOLUTE_TARGET_PATH/
done
# If there is a licence, copy it
if [ -f $TMPDIR/$LICENCE ]; then
    cp $TMPDIR/$LICENCE $ABSOLUTE_TARGET_PATH/
fi

# Check if there is no `__init__.py` in TARGET_DIR
if [ ! -f $ABSOLUTE_TARGET_PATH/__init__.py ]; then
    touch "$ABSOLUTE_TARGET_PATH/__init__.py"

    # And if IMPORTFILE is set to 1, import all files in the __init__.py
    if [ $IMPORT_FILES -eq 1 ]; then
        # Write an autogenerated marker
        echo "# Autogenerated file, do not edit" >> "$ABSOLUTE_TARGET_PATH/__init__.py"
        echo "# Original repository: $REPO_NAME" >> "$ABSOLUTE_TARGET_PATH/__init__.py"
        echo "# Original commit hash: $(git -C $TMPDIR rev-parse HEAD)" >> "$ABSOLUTE_TARGET_PATH/__init__.py"
        # If INIT_FILES is set, then write it to __init__.py
        echo "$INIT_FILE" >> "$ABSOLUTE_TARGET_PATH/__init__.py"
        # if IMPORT FILES is set, then import all files in the __init__.py
        if [ $IMPORT_FILES -eq 1 ]; then
            for FILE in "${FILES[@]}"; do
                # remove .py extension if there is
                FILE=$(echo $(basename $FILE) | sed 's/\.py$//')
                echo "from . import $FILE" >> "$ABSOLUTE_TARGET_PATH/__init__.py"
            done
        fi
    fi
fi