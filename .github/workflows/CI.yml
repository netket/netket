name: CI

on:
  pull_request:

  push:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ !contains(github.ref, 'master')}}


jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Regular tests
          - name: "Doctests"
            os: ubuntu-latest
            python-version: "3.13"
            test_type: "doctest"

          - name: "Ubuntu"
            os: ubuntu-latest
            python-version: "3.13"
            test_type: "main"

          - name: "macOS"
            os: macos-latest
            python-version: "3.13"
            test_type: "main"
            env: NUMBA_BOUNDSCHECK=1

          # Sharding tests
          - name: "Sharding (1 CPU)"
            os: ubuntu-latest
            python-version: "3.13"
            test_type: "sharding"
            sharding_script: "run_test_sharding_1cpu.sh"

          - name: "Sharding (2 CPU)"
            os: ubuntu-latest
            python-version: "3.13"
            test_type: "sharding"
            sharding_script: "run_test_sharding_2cpu.sh"

          - name: "Sharding (Standard)"
            os: ubuntu-latest
            python-version: "3.13"
            test_type: "sharding"
            sharding_script: "run_standard_tests_with_sharding.sh"

          - name: "Sharding (Distributed)"
            os: ubuntu-latest
            python-version: "3.13"
            test_type: "sharding"
            sharding_script: "run_test_sharding_distributed.sh"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-tags: true

      - name: Set up uv and Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Sync environment
        run: |
          uv sync --extra dev --extra extra ${{ matrix.test_type != 'sharding' && '--extra pyscf' || '' }}

      - name: Main tests
        if: ${{ matrix.test_type == 'main' }}
        run: |
          export NETKET_EXPERIMENTAL=1
          uv run pytest --cov=netket --cov-append --jax-cpu-disable-async-dispatch --clear-cache-every 200 -m "not slow" test

      - name: Docstring tests
        if: ${{ matrix.test_type == 'doctest' }}
        run: |
          uv run pytest --cov=netket --cov-append --doctest-continue-on-failure --doctest-modules netket/

      - name: Sharding tests
        if: ${{ matrix.test_type == 'sharding' }}
        run: |
          uv run ./test_sharding/"${{ matrix.sharding_script }}" -m 'not slow'

      - name: Generate coverage report
        if: always()
        run: |
          uv run coverage combine || true
          uv run coverage xml --ignore-errors || true

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.name }}
          path: coverage.xml

  upload-coverage:
    needs: [test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-tags: true
      
      - uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: true
      
      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true
